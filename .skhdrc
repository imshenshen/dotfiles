#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey   = <mode> '<' <action> | <action>
#
#                       mode     = 'name of mode' | <mode> ',' <mode>
#
#                       action   = <keysym> ':' <command> | <keysym> '->' ':' <command>
#                                  <keysym> ';' <mode>    | <keysym> '->' ';' <mode>
#
#                       keysym   = <mod> '-' <key> | <key>
#
#                       mod      = 'built-in mod keyword' | <mod> '+' <mod>
#
#                       key      = <literal> | <keycode>
#
#                       literal  = 'single letter or built-in keyword'
#
#                       keycode  = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       ->       = keypress is not consumed by skhd
#
#                       command  = command is executed through '$SHELL -c' and
#                                  follows valid shell syntax. if the $SHELL environment
#                                  variable is not set, it will default to '/bin/bash'.
#                                  when bash is used, the ';' delimeter can be specified
#                                  to chain commands.
#
#                                  to allow a command to extend into multiple lines,
#                                  prepend '\' at the end of the previous line.
#
#                                  an EOL character signifies the end of the bind.
#
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command  = command is executed through '$SHELL -c' and
#                                  follows valid shell syntax. if the $SHELL environment
#                                  variable is not set, it will default to '/bin/bash'.
#                                  when bash is used, the ';' delimeter can be specified
#                                  to chain commands.
#
#                                  to allow a command to extend into multiple lines,
#                                  prepend '\' at the end of the previous line.
#
#                                  an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# open terminal, blazingly fast compared to iTerm/Hyper
#cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

shift + alt - 0 : yabai -m space --balance
#shift + alt - - : ya
#shift + alt - + :


# toggle window fullscreen
shift + alt - f : yabai -m window --toggle zoom-parent
shift + alt + cmd - f : yabai -m window --toggle zoom-fullscreen
# float / unfloat window and center on screen
shift + alt - t : sh $XDG_CONFIG_HOME/yabai/toggle_float.sh
shift + alt - p : yabai -m window --toggle sticky --toggle pip

# Spaces:  Alt + [NUM]
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : sh $XDG_CONFIG_HOME/yabai/space_cycle_prev.sh
alt - 0 : sh $XDG_CONFIG_HOME/yabai/space_cycle_next.sh
alt - c : yabai -m window --toggle chatgpt || open -a "ChatGPT"

# focus window
alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east
## todo 上面不能选floating的窗口，需要加一下
# Swap window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# change window's sub-layer
shift + cmd - b : sh $XDG_CONFIG_HOME/yabai/toggle_layer.sh

# Sends Window to Space and shifts focus
## Send: Shift + Cmd + [NUM]
shift + cmd + alt - 1 : yabai -m window --space  1
shift + cmd + alt - 2 : yabai -m window --space  2
shift + cmd + alt - 3 : yabai -m window --space  3
shift + cmd + alt - 4 : yabai -m window --space  4
shift + cmd + alt - 5 : yabai -m window --space  5
shift + cmd + alt - 6 : yabai -m window --space  6
shift + cmd + alt - 7 : yabai -m window --space  7
shift + cmd + alt - 8 : yabai -m window --space  8
shift + cmd + alt - 9 : yabai -m window --space  9

shift + cmd - 1 : yabai -m window --space  1 --focus
shift + cmd - 2 : yabai -m window --space  2 --focus
shift + cmd - 3 : yabai -m window --space  3 --focus
shift + cmd - 4 : yabai -m window --space  4 --focus
shift + cmd - 5 : yabai -m window --space  5 --focus
shift + cmd - 6 : yabai -m window --space  6 --focus
shift + cmd - 7 : yabai -m window --space  7 --focus
shift + cmd - 8 : yabai -m window --space  8 --focus
shift + cmd - 9 : yabai -m window --space  9 --focus
shift + alt - 1 : yabai -m window --space  1 --focus
shift + alt - 2 : yabai -m window --space  2 --focus
shift + alt - 3 : yabai -m window --space  3 --focus
shift + alt - 4 : yabai -m window --space  4 --focus
shift + alt - 5 : yabai -m window --space  5 --focus
shift + alt - 6 : yabai -m window --space  6 --focus
shift + alt - 7 : yabai -m window --space  7 --focus
shift + alt - 8 : yabai -m window --space  8 --focus
shift + alt - 9 : yabai -m window --space  9 --focus

# Switch Recent Space
shift + alt - x : yabai -m space --focus recent

# Reset Space margin
alt - r : sh $XDG_CONFIG_HOME/yabai/configSpace.sh

# Open new Chrome
shift + cmd + alt - n : open -na "Google Chrome"
