#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey   = <mode> '<' <action> | <action>
#
#                       mode     = 'name of mode' | <mode> ',' <mode>
#
#                       action   = <keysym> ':' <command> | <keysym> '->' ':' <command>
#                                  <keysym> ';' <mode>    | <keysym> '->' ';' <mode>
#
#                       keysym   = <mod> '-' <key> | <key>
#
#                       mod      = 'built-in mod keyword' | <mod> '+' <mod>
#
#                       key      = <literal> | <keycode>
#
#                       literal  = 'single letter or built-in keyword'
#
#                       keycode  = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       ->       = keypress is not consumed by skhd
#
#                       command  = command is executed through '$SHELL -c' and
#                                  follows valid shell syntax. if the $SHELL environment
#                                  variable is not set, it will default to '/bin/bash'.
#                                  when bash is used, the ';' delimeter can be specified
#                                  to chain commands.
#
#                                  to allow a command to extend into multiple lines,
#                                  prepend '\' at the end of the previous line.
#
#                                  an EOL character signifies the end of the bind.
#
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command  = command is executed through '$SHELL -c' and
#                                  follows valid shell syntax. if the $SHELL environment
#                                  variable is not set, it will default to '/bin/bash'.
#                                  when bash is used, the ';' delimeter can be specified
#                                  to chain commands.
#
#                                  to allow a command to extend into multiple lines,
#                                  prepend '\' at the end of the previous line.
#
#                                  an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# open terminal, blazingly fast compared to iTerm/Hyper
#cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

shift + alt - 0 : yabai -m space --balance


# toggle window fullscreen
shift + alt - f : yabai -m window --toggle zoom-fullscreen
# float / unfloat window and center on screen
shift + alt - t : yabai -m window --toggle float; yabai -m window --grid 4:4:1:1:2:2

# Spaces:  Alt + [NUM]
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8

# focus window
# alt - x : yabai -m window --focus recent
# alt - h : yabai -m window --focus west
# alt - j : yabai -m window --focus south
# alt - k : yabai -m window --focus north
# alt - l : yabai -m window --focus east
# alt - z : yabai -m window --focus stack.prev
# alt - c : yabai -m window --focus stack.next

# move window
shift + cmd - h : yabai -m window --warp west
#shift + cmd - j : yabai -m window --warp south
#shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
shift + alt - right  : yabai -m window --grid 1:2:1:0:1:1

# "Warps" with another Window, potentially changing its size
# Warp: Alt + Cmd + [DIR]
#alt + cmd - h : yabai -m window --warp west
#alt + cmd - j : yabai -m window --warp south
#alt + cmd - k : yabai -m window --warp north
#alt + cmd - l : yabai -m window --warp east

# Sends Window to Space and shifts focus
# Send: Shift + Cmd + [NUM]
shift + cmd - 1 : yabai -m window --space  1
shift + cmd - 2 : yabai -m window --space  2
shift + cmd - 3 : yabai -m window --space  3
shift + cmd - 4 : yabai -m window --space  4
shift + cmd - 5 : yabai -m window --space  5
shift + cmd - 6 : yabai -m window --space  6
shift + cmd - 7 : yabai -m window --space  7
shift + cmd - 8 : yabai -m window --space  8

shift + cmd + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1
shift + cmd + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2
shift + cmd + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3
shift + cmd + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4
shift + cmd + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5
shift + cmd + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6
shift + cmd + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7
shift + cmd + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8

#shift + cmd - x : yabai -m window --space recent; yabai -m space --focus recent
#shift + cmd - z : yabai -m window --space prev; yabai -m space --focus prev
#shift + cmd - c : yabai -m window --space next; yabai -m space --focus next

# Rotate
alt - r : yabai -m space --rotate 90

# Mirror y-axis
alt - y : yabai -m space --mirror y-axis

# Mirror x-axis
alt - x : yabai -m space --mirror x-axis

# Split Type (horizontal or vertical)
#alt - e : yabai -m window --toggle split

